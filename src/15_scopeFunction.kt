/*
    람다
    람다함수도 여러 구문의 사용이 가능
    람다함수에 파라미터가 없다면 실행할 구문들만 나열하면 된다.
    파라미터가 하나뿐이라면 it사용 (생략가능)

    스코프 함수
        함수형 언어의 특징을 좀 더 편리하기 사용할 수 있도록 기본 제공하는 함수

        apply: 인스턴스를 생성한 후 변수에 담기 전에 초기화 과정을 수행할때 많이 쓰임
        run: 일반 람다 함수처럼 인스턴스 처럼 마지막 구문에 결과값을 반환
             이미 인스턴스가 만들어진 후에 인스턴스에 함수나 속성을 스코프내에서 사용해야할때 유용함
        with: run 과 동일한 기능을 가지지만 단지 인스턴스를 참조연산자 대신 파라미터를 받는다는 차이
        also/let
         - 스코프내의 변수들의 혼선을 줄여줌 (가독성을 높임)
        it을 통해 인스턴스를 사용할 수 있음
        also: 처리가 끝나면 인스턴스를 반환
        let : 처리가 끝나면 최종값을 반환
 */
fun main() {

    var price = 5000

    var b = Book("코틀린 책", 10000).apply {
        name = "[초특가]" + name
        discount()
    }

    b.run {
        println("상품 : ${name}, 가격: ${price}")
    }

    //스코프내에 변수 혼선을 줄여줌 (let)
    b.let {
        println("상품 : ${it.name}, 가격: ${it.price}")
    }

}

class Book(var name: String, var price: Int) {
    fun discount() {
        price -= 2000
    }
}